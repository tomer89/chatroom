//https://www.youtube.com/watch?v=kqBmsLvWU14



 /*   The server runs an infinite loop to keep accepting incoming requests.
    When a request comes, it assigns a new thread to handle the communication part.
    The sever also stores the client name into a vector, to keep a track of connected devices. The vector stores the thread object corresponding to the current request. The helper class uses this vector to find the name of recipient to which message is to be delivered. As this vector holds all the streams, handler class can use it to successfully deliver messages to specific clients.
    Invoke the start() method.
*/


/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package chat;


import java.awt.EventQueue;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.IOException;
import java.net.ServerSocket;
import java.net.Socket;
import java.util.Vector;
import java.util.concurrent.ExecutorService;
import java.util.logging.Level;
import java.util.logging.Logger;
/**
 *Server class that serves clients for chat use
 * @author ZAKS
 */
public class Server extends javax.swing.JFrame {

    static ServerSocket server_socket;
    static Socket socket;
    static DataInputStream data_in;
    static DataOutputStream data_out;
    //ExecutorService pool = null;
    // Vector to store active clients 
    static Vector<ClientHandler> ar = new Vector<>(); 
    // counter for clients 
    static int count = 0; 
    /**
     * Creates new form of server chat room (NetBeans)
     */
    public Server() {
        initComponents();
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
       @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        ta_msg_area = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        ta_msg_text = new javax.swing.JTextArea();
        btn_msg_send = new javax.swing.JButton();
        jTextField1 = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        ta_msg_text.setColumns(20);
        ta_msg_text.setRows(5);
        jScrollPane1.setViewportView(ta_msg_text);

        btn_msg_send.setText("Send");
        btn_msg_send.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_msg_sendActionPerformed(evt);
            }
        });

        jTextField1.setText("Server");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(ta_msg_area)
                        .addContainerGap())
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 267, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 44, Short.MAX_VALUE)
                        .addComponent(btn_msg_send)
                        .addGap(22, 22, 22))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(6, 6, 6)
                .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(ta_msg_area, javax.swing.GroupLayout.PREFERRED_SIZE, 203, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 18, Short.MAX_VALUE)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap())
                    .addGroup(layout.createSequentialGroup()
                        .addGap(26, 26, 26)
                        .addComponent(btn_msg_send)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * Not in Use
     * @param evt 
     */
    private void btn_msg_sendActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_msg_sendActionPerformed
        try{
            String msg = "";
            msg = ta_msg_text.getText().trim();
            data_out.writeUTF(msg);
        }
        catch(Exception e){
          
        }
    }//GEN-LAST:event_btn_msg_sendActionPerformed

    /**
     * @param args the command line arguments
     * Initializes a socket listner
     * Creates a UI (Not in use)
     * Creates a new Client Handler for every new user
     */
    public static void main(String args[]) {
        try {
            server_socket = new ServerSocket(1201);
        } catch (IOException ex) {
            Logger.getLogger(Server.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        /* Create and display the form */
        EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Server().setVisible(true);
            }
        });
              
        String msg_in = "";
        while(true){
            socket = null;
            try{

                socket = server_socket.accept();
            
                // obtain input and output streams 
                DataInputStream data_in = new DataInputStream(socket.getInputStream()); 
                DataOutputStream data_out = new DataOutputStream(socket.getOutputStream());
                
                try{
                    ClientHandler mtch = new ClientHandler(socket, count ,data_in, data_out); 
                    Thread t = new Thread(mtch);
                    ar.add(mtch);
                    t.start();
                    
                }
                catch(Exception e1){
                    System.out.print(e1.getMessage());
                    socket.close();
                    data_in.close();
                    data_out.close();
                }

                
                
                //t.run();
                
                count++;
                
            }catch(Exception e){
                System.out.print(e.getMessage());
            }
            
        }
        
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btn_msg_send;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField jTextField1;
    private static javax.swing.JTextField ta_msg_area;
    private javax.swing.JTextArea ta_msg_text;
    // End of variables declaration//GEN-END:variables
}
