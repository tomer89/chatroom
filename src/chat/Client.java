/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

//https://www.geeksforgeeks.org/introducing-threads-socket-programming-java/

package chat;

import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.IOException;
import java.net.Socket;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JTextArea;


/**
 * Client user to connect to chat Server
 * @author ZAKS
 */
public class Client extends javax.swing.JFrame{

    static Socket socket;
    static DataInputStream data_in;
    static DataOutputStream data_out;
    boolean isloggedin;
    Reciever r;
    int id;
    String sending_to;
    String name , ip = "127.0.0.1";
    
    
    public Client() {
        initComponents();
    }

    /**
     * A listemer for input data (Idea from https://www.youtube.com/watch?v=JDiolZ3hdEg )
     */
    public class Reciever extends Thread{
        @Override
        public void run(){
           
            while(true){
                if(isloggedin){
                    String msg_in = "";
                    try {
                        msg_in = data_in.readUTF();
                    } catch (IOException ex) {
                        Logger.getLogger(Client.class.getName()).log(Level.SEVERE, null, ex);
                    }
                    //if client got a message
                    if(msg_in.length() > 0){

                        //Protocol for diconnecting: 
                        //recieve a "\n\nYou are disconnecting" string
                        //close socket and streams...
                        //write to screen you are dis...
                        //change button text to connect
                        if(msg_in.equals("\n\nYou are disconnecting")){
                            try {   
                                //data_out.writeUTF("logout");

                                if(r != null){
                                    r.stop();
                                    r = null;
                                }
                                socket.close();
                                data_in.close();
                                data_out.close();
                                isloggedin = false;
                                ta_msg_area.setText("You are disconnected");
                                btn_connect.setText("connect");
                            } catch (IOException ex) {
                                Logger.getLogger(Client.class.getName()).log(Level.SEVERE, null, ex);
                            }
                        }else{
                            ta_msg_area.append("\nFrom server: " + msg_in);
                            msg_in = "";
                        }
                    }
                    
                    
                }else{
                    System.out.println("got here Catch!");
                }
                
            }
        }
    }
    /**
     * This method is called from within the constructor to initialize the form (NetBeans).
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        ta_msg_txt = new javax.swing.JTextField();
        btn_send_msg = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        ta_msg_area = new javax.swing.JTextArea();
        btn_connect = new javax.swing.JButton();
        btn_sendto = new javax.swing.JButton();
        ta_connect_to = new javax.swing.JTextField();
        ta_your_name = new javax.swing.JTextField();
        btn_allUsers = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        ta_msg_txt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ta_msg_txtActionPerformed(evt);
            }
        });

        btn_send_msg.setText("Send");
        btn_send_msg.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_send_msgActionPerformed(evt);
            }
        });

        ta_msg_area.setColumns(20);
        ta_msg_area.setRows(5);
        jScrollPane1.setViewportView(ta_msg_area);

        btn_connect.setText("Enter IP");
        btn_connect.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_connectActionPerformed(evt);
            }
        });

        btn_sendto.setText("Send to:");
        btn_sendto.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_sendtoActionPerformed(evt);
            }
        });

        ta_connect_to.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        ta_connect_to.setText("Enter name or \"all\" and click on \"send to\"");
        ta_connect_to.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ta_connect_toActionPerformed(evt);
            }
        });

        ta_your_name.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        ta_your_name.setText("Enter IP number or \"localhost");
        ta_your_name.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ta_your_nameActionPerformed(evt);
            }
        });

        btn_allUsers.setText("Get all Users");
        btn_allUsers.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_allUsersActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(ta_msg_txt, javax.swing.GroupLayout.PREFERRED_SIZE, 284, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(btn_send_msg, javax.swing.GroupLayout.PREFERRED_SIZE, 69, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(ta_your_name, javax.swing.GroupLayout.PREFERRED_SIZE, 206, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(btn_connect)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                    .addComponent(btn_allUsers))
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(btn_sendto)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(ta_connect_to, javax.swing.GroupLayout.PREFERRED_SIZE, 206, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addGap(0, 0, Short.MAX_VALUE))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 302, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(ta_your_name)
                    .addComponent(btn_connect)
                    .addComponent(btn_allUsers, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btn_sendto)
                    .addComponent(ta_connect_to))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(40, 40, 40)
                        .addComponent(btn_send_msg, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addContainerGap())
                    .addGroup(layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addComponent(ta_msg_txt, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE))))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void ta_msg_txtActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ta_msg_txtActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_ta_msg_txtActionPerformed

    
    /**
     * This is the button of "send message" logic.
     * Sends the name of the target + msg content with a # char to seperate them (As I configed the "send msg" protocol).
     * If msg that was sent is "Exit" this will invoke the "disconnect protocol"
     * Notice you can't send a message containing a '#'
     * @param evt 
     */
    private void btn_send_msgActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_send_msgActionPerformed
        if(sending_to != null){
            if(!ta_msg_txt.getText().trim().contains("#")){
                try{
                    String msg_out = "";
                    msg_out = sending_to + "#" + ta_msg_txt.getText().trim();
                    data_out.writeUTF(msg_out);

                    if(msg_out.equals(sending_to + "#" + "Exit")) 
                    { 
                        System.out.println("Closing this connection : " + socket); 
                        socket.close(); 
                        System.out.println("Connection closed"); 
                    }
                }catch(Exception e){
                    ta_msg_area.append(e.getMessage());
                }
            }
            else{
                ta_msg_area.append("\n ERROR: MSG can not contain the \"#\" character");
            }
        }
        else{
            ta_msg_area.append("\n ERROR: NO RECIPIENT");
        }
    }//GEN-LAST:event_btn_send_msgActionPerformed

    /**
     * Logic of connecting/disconnecting button
     * connect protocol:    connect this Client to Server and designate name;
     * First connect:       Client enters an IP in the text area to connect to. 
     *                      Client would not be able to define Server ip except this time. 
     * disconnect protocol: disconnect user and erase user
     * @param evt 
     */
    private void btn_connectActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_connectActionPerformed
        if(isloggedin){
            try {   
                data_out.writeUTF("logout");
                
                if(r != null){
                    r.stop();
                    r = null;
                }
                socket.close();
                data_in.close();
                data_out.close();
                isloggedin = false;
                ta_msg_area.setText("You are disconnected");
                btn_connect.setText("connect");
            } catch (IOException ex) {
                Logger.getLogger(Client.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        else{
            String name = "";
            name = ta_your_name.getText().trim();
            if(name.length() > 0 && !name.equals("Your Name")){
                try{
                    if(!btn_connect.getText().equals("Enter IP")){
                        socket = new Socket(ip,1201);
                        btn_connect.setText("Send to:");
                    }
                    else{
                        String input_ip = ta_your_name.getText().trim();
                        if(validIP(input_ip)){
                            ip = ta_connect_to.getText().trim();
                            ta_your_name.setText("Your Name");
                            btn_connect.setText("Connect");
                            ta_msg_area.setText("Now Enter your name and click on connect ");
                            return;
                            //btn_connect.setText("Send to:");
                        }else if(input_ip.equals("localhost")){
                            //ip is by default 127.0.0.1
                            ta_your_name.setText("Your Name");
                            btn_connect.setText("Connect");
                            ta_msg_area.setText("Now Enter your name and click on connect ");
                            return;
                            //btn_connect.setText("Send to:");
                        }else{
                            ta_msg_area.setText("Please Enter an IP number of server");
                            return;
                        }
                        
                    }
                    data_in  = new DataInputStream(socket.getInputStream());
                    data_out = new DataOutputStream(socket.getOutputStream());

                    try{
                        data_out.writeUTF("unique name#" + name);
                    }catch(Exception e){
                        ta_msg_area.append(e.getMessage());
                    }

                    isloggedin = true;
                    if(r == null){
                        r = new Reciever();
                    }
                    r.start();
                    btn_connect.setText("disconnect");


                }catch(Exception e){
                    ta_msg_area.setText("Error: " + e.getMessage() + " Most likely you didnt connect to a correct IP");
                    System.out.println("in button catch");
                }

            }
            else if(btn_connect.getText().equals("Enter IP")){
                ta_msg_area.setText("Please Enter an IP number of server");
            }
            else{
                ta_msg_area.setText("Enter a name to connect to or \"all\" for all users");
            }
        }
    
    }//GEN-LAST:event_btn_connectActionPerformed

    /**
     * Logic of the "send_to" button:
     * Tells server that this Client is sending from now on to the designated user given in the text area
     * @param evt 
     */
    private void btn_sendtoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_sendtoActionPerformed
        // TODO add your handling code here:
        sending_to = ta_connect_to.getText().trim();
        ta_msg_area.append("\n\nSending to " + sending_to + ". until changed.");
        ta_connect_to.setText("Type in new name or \"all\" to set new recipient");
    }//GEN-LAST:event_btn_sendtoActionPerformed

    private void ta_connect_toActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ta_connect_toActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_ta_connect_toActionPerformed

    private void ta_your_nameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ta_your_nameActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_ta_your_nameActionPerformed

    /**
     * Logic of the all users button:
     * Sends a requests and gets back a list of all users
     * @param evt 
     */
    private void btn_allUsersActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_allUsersActionPerformed
        try {
            data_out.writeUTF("unique allUsers#" + name);
        } catch (IOException ex) {
            Logger.getLogger(Client.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_btn_allUsersActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Client.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Client.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Client.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Client.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        Client c = new Client();
        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Client().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btn_allUsers;
    private javax.swing.JButton btn_connect;
    private javax.swing.JButton btn_send_msg;
    private javax.swing.JButton btn_sendto;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField ta_connect_to;
    public javax.swing.JTextArea ta_msg_area;
    private javax.swing.JTextField ta_msg_txt;
    private javax.swing.JTextField ta_your_name;
    // End of variables declaration//GEN-END:variables
/**
 *
 * @return 
 */
    public JTextArea getMainTextArea()
    {
        return ta_msg_area;
    }

    private static boolean validIP (String ip) {
        try {
            if ( ip == null || ip.isEmpty() ) {
                return false;
            }

            String[] parts = ip.split( "\\." );
            if ( parts.length != 4 ) {
                return false;
            }

            for ( String s : parts ) {
                int i = Integer.parseInt( s );
                if ( (i < 0) || (i > 255) ) {
                    return false;
                }
            }
            if ( ip.endsWith(".") ) {
                return false;
            }

            return true;
        } catch (NumberFormatException nfe) {
            return false;
        }
    }
    
}
