/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package chat_server;

import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.IOException;
import java.net.ServerSocket;
import java.net.Socket;
import java.util.StringTokenizer;
import javax.swing.JTextArea;
import javax.swing.JTextField;

//static int id = 0;

/**
 *
 * @author ZAKS
 */
public class Client extends javax.swing.JFrame implements Runnable{

    static Socket socket;
    static DataInputStream data_in;
    static DataOutputStream data_out;
    boolean isloggedin;
    //static int counter = 0;
    int id;// = counter;
    
    
    public Client() {
        //data_in = new DataInputStream(socket.getInputStream()); 
        //data_out = new DataOutputStream(socket.getOutputStream());
        initComponents();
    }

    /**
     * Creates new form client
     */
    public Client(int id) {
        //data_in = new DataInputStream(socket.getInputStream()); 
        //data_out = new DataOutputStream(socket.getOutputStream());
        initComponents();
        new Client().setVisible(true);
        this.id = id;
        
        ta_msg_area.append("ID is: " + id);
        
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        ta_msg_txt = new javax.swing.JTextField();
        btn_send_msg = new javax.swing.JButton();
        jTextField1 = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        ta_msg_area = new javax.swing.JTextArea();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        ta_msg_txt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ta_msg_txtActionPerformed(evt);
            }
        });

        btn_send_msg.setText("Send");
        btn_send_msg.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_send_msgActionPerformed(evt);
            }
        });

        jTextField1.setText("Client");
        jTextField1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField1ActionPerformed(evt);
            }
        });

        ta_msg_area.setColumns(20);
        ta_msg_area.setRows(5);
        jScrollPane1.setViewportView(ta_msg_area);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jScrollPane1)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addComponent(ta_msg_txt, javax.swing.GroupLayout.PREFERRED_SIZE, 284, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btn_send_msg, javax.swing.GroupLayout.DEFAULT_SIZE, 86, Short.MAX_VALUE))
                    .addComponent(jTextField1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 201, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(ta_msg_txt)
                    .addComponent(btn_send_msg, javax.swing.GroupLayout.DEFAULT_SIZE, 56, Short.MAX_VALUE))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void ta_msg_txtActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ta_msg_txtActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_ta_msg_txtActionPerformed

    private void btn_send_msgActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_send_msgActionPerformed
        // TODO add your handling code here:
        try{
            String msg_out = "";
            msg_out = ta_msg_txt.getText().trim();
            data_out.writeUTF(msg_out);
        }catch(Exception e){
            
        }
    }//GEN-LAST:event_btn_send_msgActionPerformed

    private void jTextField1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField1ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Client.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Client.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Client.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Client.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Client().setVisible(true);
            }
        });
        
        
        try{
            socket = new Socket("127.0.0.1",1201);
            data_in  = new DataInputStream(socket.getInputStream());
            data_out = new DataOutputStream(socket.getOutputStream());
            String msg_in = "";
            while(!msg_in.equals("exit")){
                msg_in = data_in.readUTF();
                //ta_msg_area.setText(ta_msg_area.getText().trim()+"\n Server: " + msg_in + "\n");
            }
        }catch(Exception e){
            
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btn_send_msg;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField jTextField1;
    public javax.swing.JTextArea ta_msg_area;
    private javax.swing.JTextField ta_msg_txt;
    // End of variables declaration//GEN-END:variables
public JTextArea getMainTextArea()
{
     return ta_msg_area;
}
    @Override
    public void run() {
        
        ta_msg_area.append("ID is: " + id);
        
        String received = ""; 
        while (true)  
        { 
            
            try
            { 
                // receive the string 
                //received = data_in.readUTF(); 
                 
                //System.out.println(received); 
                  
                if(received.equals("logout")){ 
                    this.isloggedin=false; 
                    this.socket.close(); 
                    break; 
                } 
                  
                // break the string into message and recipient part 
                StringTokenizer st = new StringTokenizer(received, "#"); 
                String MsgToSend = st.nextToken(); 
                String recipient = st.nextToken(); 
  
                // search for the recipient in the connected devices list. 
                // ar is the vector storing client of active users 
                for (Client mc : Server.ar)  
                { 
                    // if the recipient is found, write on its 
                    // output stream 
                    if (mc.id == Integer.parseInt(recipient) && mc.isloggedin==true)  
                    { 
                        mc.data_out.writeUTF(this.id +" : "+MsgToSend); 
                        break; 
                    } 
                } 
            } catch (IOException e) { 
                  
                e.printStackTrace(); 
            } 
              
        } 
        try
        { 
            // closing resources 
            this.data_in.close(); 
            this.data_out.close(); 
              
        }catch(IOException e){ 
            e.printStackTrace(); 
        } 
    } 
}
